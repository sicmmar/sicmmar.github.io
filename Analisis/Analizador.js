/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,4],$V2=[1,8],$V3=[1,6],$V4=[1,10],$V5=[1,11],$V6=[2,5,7,8,13,21,22],$V7=[1,18],$V8=[1,26],$V9=[9,11,23,37],$Va=[1,33],$Vb=[1,29],$Vc=[1,30],$Vd=[1,31],$Ve=[1,32],$Vf=[1,35],$Vg=[1,36],$Vh=[1,37],$Vi=[1,38],$Vj=[1,65],$Vk=[1,66],$Vl=[1,67],$Vm=[1,50],$Vn=[1,51],$Vo=[1,52],$Vp=[1,53],$Vq=[1,54],$Vr=[1,55],$Vs=[1,56],$Vt=[1,57],$Vu=[1,58],$Vv=[1,59],$Vw=[1,60],$Vx=[1,61],$Vy=[1,62],$Vz=[1,63],$VA=[1,64],$VB=[11,14,17,23,25,32,33,35,38,40,41,42,43,44,45,46,47,48,49,50,51,52],$VC=[11,14,17,23,25,35,38,40],$VD=[11,14,17,23,25,35,38,40,41,42,43,44,45,46],$VE=[11,14,17,23,25,35,38,40,41,42,43,44,45,46,47,48],$VF=[11,14,17,23,25,35,38,40,41,42,43,44,45,46,47,48,49,50],$VG=[17,23];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LINSTRUCCION":4,"EOF":5,"INSTRUCCION":6,"rtypes":7,"identificador":8,"=":9,"EXP":10,"pyc":11,"VAR":12,"rconsole":13,".":14,"rlog":15,"(":16,")":17,"T":18,"LVAR":19,"}":20,"rlet":21,"rconst":22,",":23,"IDENTI":24,":":25,"TIPO":26,"rnumber":27,"rstring":28,"rboolean":29,"rvoid":30,"AOD":31,"++":32,"--":33,"LENVIO":34,"?":35,"lla":36,"llc":37,"||":38,"!":39,"&&":40,"==":41,"!=":42,"<":43,"<=":44,">":45,">=":46,"+":47,"-":48,"*":49,"/":50,"^":51,"%":52,"rfalse":53,"rtrue":54,"numero":55,"cadena":56,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"rtypes",8:"identificador",9:"=",11:"pyc",13:"rconsole",14:".",15:"rlog",16:"(",17:")",20:"}",21:"rlet",22:"rconst",23:",",25:":",27:"rnumber",28:"rstring",29:"rboolean",30:"rvoid",32:"++",33:"--",35:"?",36:"lla",37:"llc",38:"||",39:"!",40:"&&",41:"==",42:"!=",43:"<",44:"<=",45:">",46:">=",47:"+",48:"-",49:"*",50:"/",51:"^",52:"%",53:"rfalse",54:"rtrue",55:"numero",56:"cadena"},
productions_: [0,[3,2],[4,2],[4,1],[6,5],[6,1],[6,7],[12,3],[12,5],[12,4],[12,2],[12,2],[18,1],[18,1],[19,3],[19,1],[24,3],[24,3],[26,1],[26,1],[26,1],[26,1],[31,2],[31,2],[34,3],[34,1],[10,5],[10,3],[10,3],[10,3],[10,2],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,2],[10,4],[10,3],[10,1],[10,1],[10,3],[10,1],[10,1],[10,1],[10,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 var h = [];
                        h.push($$[$0-1]);
                        return newNodo("INICIO", "", yylineno, h); 
break;
case 2:
 this.$ = $$[$0-1];
                                this.$.hijos.push($$[$0]);
break;
case 3:
 var h = [];
                    h.push($$[$0]);
                    this.$ = newNodo("LINSTRUCCION", "", yylineno, h);
break;
case 4:
 var h = [];
                                                h.push(newNodo("Identificador", $$[$0-3], yylineno, []));
                                                h.push($$[$0-1]);
                                                this.$ = newNodo("TYPE", "", yylineno, h);
    
break;
case 5: case 47:
 this.$ = $$[$0]; 
break;
case 6:
 var h = [];
                                        h.push($$[$0-2]);
                                        this.$ = newNodo("IMPRIMIR", "", yylineno, h); 
break;
case 7:
 var h = [];
                    h.push($$[$0-2]);
                    h.push($$[$0-1]);
                    this.$ = newNodo("VAR", "", yylineno, h); 
break;
case 8:
 var h = [];
                    h.push($$[$0-4]);
                    h.push($$[$0-3]);
                    h.push($$[$0-1]);
                    this.$ = newNodo("VAR", "", yylineno, h);
break;
case 9:
 var h = [];
                    h.push(newNodo("IDENTIFICADOR", $$[$0-3], yylineno, []));
                    h.push($$[$0-1]);
                    this.$ = newNodo("VAR", "", yylineno, h);
break;
case 12: case 13: case 18: case 19: case 20: case 21:
 this.$ = newNodo("TIPO", $$[$0], yylineno, []); 
break;
case 14:
     this.$ = $$[$0-2];
                            this.$.hijos.push($$[$0]); 
break;
case 15:
  var h = [];
                h.push($$[$0]);
                this.$ = newNodo("LISTAVAR", "", yylineno, h); 
break;
case 16:
 var h = [];
                            h.push(newNodo("IDENTIFICADOR", $$[$0-2], yylineno, [])); 
                            h.push($$[$0]);
                            this.$ = newNodo("ID", "", yylineno, h); 
break;
case 17:
 var h = [];
                            h.push(newNodo("IDENTIFICADOR", $$[$0-2], yylineno, [])); 
                            h.push(newNodo("Identificador", $$[$0], yylineno, []));
                            this.$ = newNodo("ID", "", yylineno, h);
                            
break;
case 22:
 var h = [];
                h.push($$[$0-1]);
                h.push(newNodo("++", "", yylineno, []));
                this.$ = newNodo("AUMENTO", "", yylineno, h);
break;
case 23:
 var h = [];
                h.push($$[$0-1]);
                h.push(newNodo("--", "", yylineno, []));
                this.$ = newNodo("DECREMENTO", "", yylineno, h);
break;
case 24:
 var h = [];
        h.push($$[$0]);
        var e = newNodo("EXP", "", yylineno, h);
        h = [];
        h.push(e);
        this.$ = $$[$0-2];
        this.$.hijos.push(h);
break;
case 25:
 var h = [];
        h.push($$[$0]);
        var e = newNodo("EXP", "", yylineno, h);
        h = [];
        h.push(e);
        this.$ = newNodo("LISTA", "", yylineno, h);
break;
case 26:
 var h = [];
                            h.push($$[$0-4]);
                            h.push(newNodo("Interr", "?", yylineno, []));
                            h.push($$[$0-2]);
                            h.push(newNodo("Dos puntos", ":", yylineno, []));
                            h.push($$[$0]);
                            this.$ = newNodo("Ternario", "", yylineno, h); 
break;
case 27:
 this.$ = $$[$0-1]; 
break;
case 28:
 var h = [];
                        h.push(newNodo("Llave abierta", $$[$0-2], yylineno, []));
                        h.push($$[$0-1]);
                        h.push(newNodo("Llave cerrada", $$[$0], yylineno, []));
                        this.$ = newNodo("Def. Type", "", yylineno, h); 
break;
case 29:
 var h = [];
                    h.push($$[$0-2]);
                    h.push(newNodo("", $$[$0-1], yylineno, []));
                    h.push($$[$0]);
                    this.$ = newNodo("Or", "", yylineno, h);
break;
case 30:
 var h = [];
                    h.push(newNodo("", $$[$0-1], yylineno, []));
                    h.push($$[$0]);
                    this.$ = newNodo("Mayor o Igual", "", yylineno, h);
break;
case 31:
 var h = [];
                    h.push($$[$0-2]);
                    h.push(newNodo("", $$[$0-1], yylineno, []));
                    h.push($$[$0]);
                    this.$ = newNodo("And", "", yylineno, h);
break;
case 32:
 var h = [];
                    h.push($$[$0-2]);
                    h.push(newNodo("", $$[$0-1], yylineno, []));
                    h.push($$[$0]);
                    this.$ = newNodo("Igual", "", yylineno, h);
break;
case 33:
 var h = [];
                    h.push($$[$0-2]);
                    h.push(newNodo("", $$[$0-1], yylineno, []));
                    h.push($$[$0]);
                    this.$ = newNodo("Diferente", "", yylineno, h);
break;
case 34:
 var h = [];
                    h.push($$[$0-2]);
                    h.push(newNodo("", $$[$0-1], yylineno, []));
                    h.push($$[$0]);
                    this.$ = newNodo("Menor", "", yylineno, h);
break;
case 35:
 var h = [];
                    h.push($$[$0-2]);
                    h.push(newNodo("", $$[$0-1], yylineno, []));
                    h.push($$[$0]);
                    this.$ = newNodo("Menor o Igual", "", yylineno, h);
break;
case 36:
 var h = [];
                    h.push($$[$0-2]);
                    h.push(newNodo("", $$[$0-1], yylineno, []));
                    h.push($$[$0]);
                    this.$ = newNodo("Mayor", "", yylineno, h);
break;
case 37:
 var h = [];
                    h.push($$[$0-2]);
                    h.push(newNodo("", $$[$0-1], yylineno, []));
                    h.push($$[$0]);
                    this.$ = newNodo("Mayor o Igual", "", yylineno, h);
break;
case 38:
 var h = [];
                    h.push($$[$0-2]);
                    h.push(newNodo("Mas", $$[$0-1], yylineno, []));
                    h.push($$[$0]);
                    this.$ = newNodo("Suma", "", yylineno, h);
break;
case 39:
 var h = [];
                    h.push($$[$0-2]);
                    h.push(newNodo("Menos", $$[$0-1], yylineno, []));
                    h.push($$[$0]);
                    this.$ = newNodo("Resta", "", yylineno, h);
break;
case 40:
 var h = [];
                    h.push($$[$0-2]);
                    h.push(newNodo("Mult", $$[$0-1], yylineno, []));
                    h.push($$[$0]);
                    this.$ = newNodo("Multiplicacion", "", yylineno, h);
break;
case 41:
 var h = [];
                    h.push($$[$0-2]);
                    h.push(newNodo("Div", $$[$0-1], yylineno, []));
                    h.push($$[$0]);
                    this.$ = newNodo("Division", "", yylineno, h);
break;
case 42:
 var h = [];
                    h.push($$[$0-2]);
                    h.push(newNodo("Pot", $$[$0-1], yylineno, []));
                    h.push($$[$0]);
                    this.$ = newNodo("Potencia", "", yylineno, h);
break;
case 43:
 var h = [];
                    h.push($$[$0-2]);
                    h.push(newNodo("Mod", $$[$0-1], yylineno, []));
                    h.push($$[$0]);
                    this.$ = newNodo("Modular", "", yylineno, h);
break;
case 44:
 var h = [];
                            h.push(newNodo("Signo negativo", $$[$0-1], yylineno, []));
                            h.push($$[$0]);
                            this.$ = newNodo("Menos", "", yylineno, h);
break;
case 45:
 var h = [];
                                        h.push($$[$0-1]);
                                        this.$ = newNodo("Llamada funcion con Parametros", $$[$0-3], yylineno, h); 
break;
case 46:
 this.$ = newNodo("Llamada Funcion sin Parametros", $$[$0-2], yylineno, []); 
break;
case 48:
 this.$ = newNodo("Identificador", $$[$0], yylineno, []); 
break;
case 49:
 this.$ = $$[$0-2];
                    this.$.hijos.push($$[$0]); 
break;
case 50:
 this.$ = newNodo("Falso", $$[$0], yylineno, []); 
break;
case 51:
 this.$ = newNodo("Verdadero", $$[$0], yylineno, []); 
break;
case 52:
 this.$ = newNodo("Numero", $$[$0], yylineno, []);
break;
case 53:
 this.$ = newNodo("Cadena", $$[$0], yylineno, []); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,8:$V2,12:5,13:$V3,18:7,21:$V4,22:$V5},{1:[3]},{2:$V0,5:[1,12],6:13,7:$V1,8:$V2,12:5,13:$V3,18:7,21:$V4,22:$V5},o($V6,[2,3]),{8:[1,14]},o($V6,[2,5]),{14:[1,15]},{8:$V7,19:16,24:17},{9:[1,19]},{11:[1,20],20:[1,21]},{8:[2,12]},{8:[2,13]},{1:[2,1]},o($V6,[2,2]),{9:[1,22]},{15:[1,23]},{9:[1,25],11:[1,24],23:$V8},o($V9,[2,15]),{25:[1,27]},{8:$Va,10:28,16:$Vb,31:34,36:$Vc,39:$Vd,48:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},o($V6,[2,10]),o($V6,[2,11]),{8:$Va,10:39,16:$Vb,31:34,36:$Vc,39:$Vd,48:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{16:[1,40]},o($V6,[2,7]),{8:$Va,10:41,16:$Vb,31:34,36:$Vc,39:$Vd,48:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{8:$V7,24:42},{8:[1,44],26:43,27:[1,45],28:[1,46],29:[1,47],30:[1,48]},{11:[1,49],14:$Vj,32:$Vk,33:$Vl,35:$Vm,38:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA},{8:$Va,10:68,16:$Vb,31:34,36:$Vc,39:$Vd,48:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{8:$V7,19:69,24:17},{8:$Va,10:70,16:$Vb,31:34,36:$Vc,39:$Vd,48:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{8:$Va,10:71,16:$Vb,31:34,36:$Vc,39:$Vd,48:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},o($VB,[2,48],{16:[1,72]}),o($VB,[2,47]),o($VB,[2,50]),o($VB,[2,51]),o($VB,[2,52]),o($VB,[2,53]),{11:[1,73],14:$Vj,32:$Vk,33:$Vl,35:$Vm,38:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA},{8:$Va,10:74,16:$Vb,31:34,36:$Vc,39:$Vd,48:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{11:[1,75],14:$Vj,32:$Vk,33:$Vl,35:$Vm,38:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA},o($V9,[2,14]),o($V9,[2,16]),o($V9,[2,17]),o($V9,[2,18]),o($V9,[2,19]),o($V9,[2,20]),o($V9,[2,21]),o($V6,[2,9]),{8:$Va,10:76,16:$Vb,31:34,36:$Vc,39:$Vd,48:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{8:$Va,10:77,16:$Vb,31:34,36:$Vc,39:$Vd,48:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{8:$Va,10:78,16:$Vb,31:34,36:$Vc,39:$Vd,48:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{8:$Va,10:79,16:$Vb,31:34,36:$Vc,39:$Vd,48:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{8:$Va,10:80,16:$Vb,31:34,36:$Vc,39:$Vd,48:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{8:$Va,10:81,16:$Vb,31:34,36:$Vc,39:$Vd,48:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{8:$Va,10:82,16:$Vb,31:34,36:$Vc,39:$Vd,48:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{8:$Va,10:83,16:$Vb,31:34,36:$Vc,39:$Vd,48:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{8:$Va,10:84,16:$Vb,31:34,36:$Vc,39:$Vd,48:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{8:$Va,10:85,16:$Vb,31:34,36:$Vc,39:$Vd,48:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{8:$Va,10:86,16:$Vb,31:34,36:$Vc,39:$Vd,48:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{8:$Va,10:87,16:$Vb,31:34,36:$Vc,39:$Vd,48:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{8:$Va,10:88,16:$Vb,31:34,36:$Vc,39:$Vd,48:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{8:$Va,10:89,16:$Vb,31:34,36:$Vc,39:$Vd,48:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{8:$Va,10:90,16:$Vb,31:34,36:$Vc,39:$Vd,48:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},{8:$Va,10:91,16:$Vb,31:34,36:$Vc,39:$Vd,48:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},o($VB,[2,22]),o($VB,[2,23]),{14:$Vj,17:[1,92],32:$Vk,33:$Vl,35:$Vm,38:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA},{23:$V8,37:[1,93]},o($VC,[2,30],{32:$Vk,33:$Vl,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA}),o($VB,[2,44]),{8:$Va,10:96,16:$Vb,17:[1,95],31:34,34:94,36:$Vc,39:$Vd,48:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},o($V6,[2,4]),{14:$Vj,17:[1,97],32:$Vk,33:$Vl,35:$Vm,38:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA},o($V6,[2,8]),{14:$Vj,25:[1,98],32:$Vk,33:$Vl,35:$Vm,38:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA},o([11,14,17,23,25,35,38],[2,29],{32:$Vk,33:$Vl,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA}),o($VC,[2,31],{32:$Vk,33:$Vl,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA}),o($VD,[2,32],{32:$Vk,33:$Vl,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA}),o($VD,[2,33],{32:$Vk,33:$Vl,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA}),o($VD,[2,34],{32:$Vk,33:$Vl,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA}),o($VD,[2,35],{32:$Vk,33:$Vl,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA}),o($VD,[2,36],{32:$Vk,33:$Vl,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA}),o($VD,[2,37],{32:$Vk,33:$Vl,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA}),o($VE,[2,38],{32:$Vk,33:$Vl,49:$Vx,50:$Vy,51:$Vz,52:$VA}),o($VE,[2,39],{32:$Vk,33:$Vl,49:$Vx,50:$Vy,51:$Vz,52:$VA}),o($VF,[2,40],{32:$Vk,33:$Vl,51:$Vz,52:$VA}),o($VF,[2,41],{32:$Vk,33:$Vl,51:$Vz,52:$VA}),o([11,14,17,23,25,35,38,40,41,42,43,44,45,46,47,48,49,50,51],[2,42],{32:$Vk,33:$Vl,52:$VA}),o([11,14,17,23,25,35,38,40,41,42,43,44,45,46,47,48,49,50,51,52],[2,43],{32:$Vk,33:$Vl}),o([11,14,17,23,25],[2,49],{32:$Vk,33:$Vl,35:$Vm,38:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA}),o($VB,[2,27]),o($VB,[2,28]),{17:[1,99],23:[1,100]},o($VB,[2,46]),o($VG,[2,25],{14:$Vj,32:$Vk,33:$Vl,35:$Vm,38:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA}),{11:[1,101]},{8:$Va,10:102,16:$Vb,31:34,36:$Vc,39:$Vd,48:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},o($VB,[2,45]),{8:$Va,10:103,16:$Vb,31:34,36:$Vc,39:$Vd,48:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi},o($V6,[2,6]),o([11,14,17,23,25,35],[2,26],{32:$Vk,33:$Vl,38:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA}),o($VG,[2,24],{14:$Vj,32:$Vk,33:$Vl,35:$Vm,38:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA})],
defaultActions: {10:[2,12],11:[2,13],12:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* comentario de una linea */
break;
case 1:/* comentario multilinea */ 
break;
case 2:return 46;
break;
case 3:return 32;
break;
case 4:return 33;
break;
case 5:return 44;
break;
case 6:return 40;
break;
case 7:return 38;
break;
case 8:return 41;
break;
case 9:return 42;
break;
case 10:return 47;
break;
case 11:return 48;
break;
case 12:return 49;
break;
case 13:return 50;
break;
case 14:return 51;
break;
case 15:return 16;
break;
case 16:return 17;
break;
case 17:return 52;
break;
case 18:return 39;
break;
case 19:return 9;
break;
case 20:return 45;
break;
case 21:return 43;
break;
case 22:return 36;
break;
case 23:return 37;
break;
case 24:return 11;
break;
case 25:return 23;
break;
case 26:return 25;
break;
case 27:return 14;
break;
case 28:return 35;
break;
case 29:return 27;
break;
case 30:return 28;
break;
case 31:return 29;
break;
case 32:return 30;
break;
case 33:return 53;
break;
case 34:return 54;
break;
case 35:return 'rif';
break;
case 36:return 'relse';
break;
case 37:return 'rswitch';
break;
case 38:return 'rcase';
break;
case 39:return 'rdefault';
break;
case 40:return 'rwhile';
break;
case 41:return 'rdo';
break;
case 42:return 'rfor';
break;
case 43:return 'rbreak';
break;
case 44:return 'rcontinue';
break;
case 45:return 'rreturn';
break;
case 46:return 21;
break;
case 47:return 22;
break;
case 48:return 13;
break;
case 49:return 15;
break;
case 50:return 7;
break;
case 51: return 55; 
break;
case 52: return 8; 
break;
case 53: return 56; 
break;
case 54: /* skip whitespace */ 
break;
case 55: return 5; 
break;
case 56:listaError.push(err);
break;
}
},
rules: [/^(?:(\/\/.*\r\n)|(\/\/.*\n)|(\/\/.*\r))/,/^(?:\/\*\/*([^*/]|[^*]\/|\*[^/])*\**\*\/)/,/^(?:>=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:<=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:==)/,/^(?:!=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:\()/,/^(?:\))/,/^(?:%)/,/^(?:!)/,/^(?:=)/,/^(?:>)/,/^(?:<)/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:\.)/,/^(?:\?)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:type\b)/,/^(?:[0-9]+(\.[0-9]+)?)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:[´\"`'].*[´\"`'])/,/^(?:\s+)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Analizador;
exports.Parser = Analizador.Parser;
exports.parse = function () { return Analizador.parse.apply(Analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}